{
  "_args": [
    [
      {
        "raw": "concurrently",
        "scope": null,
        "escapedName": "concurrently",
        "name": "concurrently",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\thier\\Desktop\\WeSponsor\\fullstack_app"
    ]
  ],
  "_from": "concurrently",
  "_hasShrinkwrap": false,
  "_id": "concurrently@4.1.0",
  "_location": "/concurrently",
  "_nodeVersion": "10.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/concurrently_4.1.0_1542584889584_0.5185890166711771"
  },
  "_npmUser": {
    "name": "gustavohenke",
    "email": "guhenke@gmail.com"
  },
  "_npmVersion": "6.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "concurrently",
    "scope": null,
    "escapedName": "concurrently",
    "name": "concurrently",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/concurrently/-/concurrently-4.1.0.tgz",
  "_shasum": "17fdf067da71210685d9ea554423ef239da30d33",
  "_shrinkwrap": null,
  "_spec": "concurrently",
  "_where": "C:\\Users\\thier\\Desktop\\WeSponsor\\fullstack_app",
  "author": {
    "name": "Kimmo Brunfeldt"
  },
  "bin": {
    "concurrently": "./bin/concurrently.js"
  },
  "bugs": {
    "url": "https://github.com/kimmobrunfeldt/concurrently/issues"
  },
  "dependencies": {
    "chalk": "^2.4.1",
    "date-fns": "^1.23.0",
    "lodash": "^4.17.10",
    "read-pkg": "^4.0.1",
    "rxjs": "^6.3.3",
    "spawn-command": "^0.0.2-1",
    "supports-color": "^4.5.0",
    "tree-kill": "^1.1.0",
    "yargs": "^12.0.1"
  },
  "description": "Run commands concurrently",
  "devDependencies": {
    "coveralls": "^3.0.2",
    "eslint": "^5.4.0",
    "jest": "^23.5.0",
    "jest-create-mock-instance": "^1.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-pwzXCE7qtOB346LyO9eFWpkFJVO3JQZ/qU/feGeaAHiX1M3Rw3zgXKc5cZ8vSH5DGygkjzLFDzA/pwoQDkRNGg==",
    "shasum": "17fdf067da71210685d9ea554423ef239da30d33",
    "tarball": "https://registry.npmjs.org/concurrently/-/concurrently-4.1.0.tgz",
    "fileCount": 50,
    "unpackedSize": 580756,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb8fo6CRA9TVsSAnZWagAAs7MP/jY4YtQrw9ziOVW2Nbfb\nlRg2yN5zt1PVFPZIb03JFiDYV+458WdFe5YAE0X6PSAtOTCKYVyA8VvQiq4h\nyu0GRQPxdkTQdCzL5Qnz6widTxtk67rz9uL7wId1TRv9x1AjWZaUFtMcB5mj\nEqCghg95y6pF+JEvO58YVKa6y7uPuw6LNWYceV4rL1woz5AfiSNvuQ/PQmxv\nLLOPMCLY/yVLZuq7DZI17tX0cVbv9NoAzBZmQ5GE7uPfXKpHjdlcRcvXPOiv\n33BRa/Y4lC+V+9dN+cGJ8FbG67CRozf2yjjXvkQDyyPXn2zsOsDmOHRbrePk\npe49pePwykqNu2x/nQbVVauUN1bIOE6aTn41cFJSQbPqHTO0FPKjwX6qNMYh\nYpIGL4wt7quLTUtBK8PfuelJ+CmImEB20s0BflH7TXzLnSgFNGIQXKcpXRDL\nIEAaffDx/HFoxUb8XuW6cvTrAXAohgiLvA/SNcHF3T0Y2xWIHQZBRZN51VKi\niMwn7sLkOvUHGYbhE7MQIwQ/ggCNAL69hc+1e10ft6tBgr2KukmCMbgGORJ2\nXFHO8HgIkIv0BFZNdj5I+06D7NBZM/W2ImIZtbJ5Nm5AXPWsSrG6Obb8GDz/\noAlsh0dQzivW2tAZlcYZjo6KkpIMiEJMDKYig3qVGRCie5HwwVpmLFTqelGM\nuMiM\r\n=BcLx\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "gitHead": "313de5305f74f99c8c1215860473890ae1f1cc28",
  "homepage": "https://github.com/kimmobrunfeldt/concurrently#readme",
  "jest": {
    "collectCoverage": true,
    "collectCoverageFrom": [
      "src/**/*.js"
    ],
    "coveragePathIgnorePatterns": [
      "/fixtures/",
      "/node_modules/"
    ],
    "testEnvironment": "node"
  },
  "keywords": [
    "bash",
    "concurrent",
    "parallel",
    "concurrently",
    "command",
    "sh"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "gustavohenke",
      "email": "guhenke@gmail.com"
    },
    {
      "name": "kimmobrunfeldt",
      "email": "kimmo.brunfeldt@gmail.com"
    }
  ],
  "name": "concurrently",
  "optionalDependencies": {},
  "readme": "# Concurrently\n\n[![Travis Build Status](https://travis-ci.org/kimmobrunfeldt/concurrently.svg)](https://travis-ci.org/kimmobrunfeldt/concurrently) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/github/kimmobrunfeldt/concurrently?branch=master&svg=true)](https://ci.appveyor.com/project/kimmobrunfeldt/concurrently) *master branch status*\n\n[![NPM Badge](https://nodei.co/npm/concurrently.png?downloads=true)](https://www.npmjs.com/package/concurrently)\n\nRun multiple commands concurrently.\nLike `npm run watch-js & npm run watch-less` but better.\n\n![](docs/demo.gif)\n\n**Table of contents**\n- [Why](#why)\n- [Install](#install)\n- [Usage](#usage)\n- [Programmatic Usage](#programmatic-usage)\n- [FAQ](#faq)\n\n## Why\n\nI like [task automation with npm](http://substack.net/task_automation_with_npm_run)\nbut the usual way to run multiple commands concurrently is\n`npm run watch-js & npm run watch-css`. That's fine but it's hard to keep\non track of different outputs. Also if one process fails, others still keep running\nand you won't even notice the difference.\n\nAnother option would be to just run all commands in separate terminals. I got\ntired of opening terminals and made **concurrently**.\n\n**Features:**\n\n* Cross platform (including Windows)\n* Output is easy to follow with prefixes\n* With `--kill-others` switch, all commands are killed if one dies\n* Spawns commands with [spawn-command](https://github.com/mmalecki/spawn-command)\n\n## Install\n\nThe tool is written in Node.js, but you can use it to run **any** commands.\n\n```bash\nnpm install -g concurrently\n```\n\nor if you are using it from npm scripts:\n\n```bash\nnpm install concurrently --save\n```\n\n## Usage\n\nRemember to surround separate commands with quotes:\n```bash\nconcurrently \"command1 arg\" \"command2 arg\"\n```\n\nOtherwise **concurrently** would try to run 4 separate commands:\n`command1`, `arg`, `command2`, `arg`.\n\nIn package.json, escape quotes:\n\n```bash\n\"start\": \"concurrently \\\"command1 arg\\\" \\\"command2 arg\\\"\"\n```\n\nNPM run commands can be shortened:\n\n```bash\nconcurrently \"npm:watch-js\" \"npm:watch-css\" \"npm:watch-node\"\n\n# Equivalent to:\nconcurrently -n watch-js,watch-css,watch-node \"npm run watch-js\" \"npm run watch-css\" \"npm run watch-node\"\n```\n\nNPM shortened commands also support wildcards. Given the following scripts in\npackage.json:\n\n```javascript\n{\n    //...\n    \"scripts\": {\n        // ...\n        \"watch-js\": \"...\",\n        \"watch-css\": \"...\",\n        \"watch-node\": \"...\",\n        // ...\n    },\n    // ...\n}\n```\n\n```bash\nconcurrently \"npm:watch-*\"\n\n# Equivalent to:\nconcurrently -n js,css,node \"npm run watch-js\" \"npm run watch-css\" \"npm run watch-node\"\n\n# Any name provided for the wildcard command will be used as a prefix to the wildcard\n# part of the script name:\nconcurrently -n w: npm:watch-*\n\n# Equivalent to:\nconcurrently -n w:js,w:css,w:node \"npm run watch-js\" \"npm run watch-css\" \"npm run watch-node\"\n```\n\nGood frontend one-liner example [here](https://github.com/kimmobrunfeldt/dont-copy-paste-this-frontend-template/blob/5cd2bde719654941bdfc0a42c6f1b8e69ae79980/package.json#L9).\n\nHelp:\n\n```\n\nconcurrently [options] <command ...>\n\nGeneral\n  -n, --names       List of custom names to be used in prefix template.\n                    Example names: \"main,browser,server\"                [string]\n  --name-separator  The character to split <names> on. Example usage:\n                    concurrently -n \"styles|scripts|server\" --name-separator \"|\"\n                                                                  [default: \",\"]\n  -r, --raw         Output only raw output of processes, disables prettifying\n                    and concurrently coloring.                         [boolean]\n  -s, --success     Return exit code of zero or one based on the success or\n                    failure of the \"first\" child to terminate, the \"last child\",\n                    or succeed only if \"all\" child processes succeed.\n                              [choices: \"first\", \"last\", \"all\"] [default: \"all\"]\n  --no-color        Disables colors from logging                       [boolean]\n\nPrefix styling\n  -p, --prefix            Prefix used in logging for each process.\n                          Possible values: index, pid, time, command, name,\n                          none, or a template. Example template: \"{time}-{pid}\"\n                         [string] [default: index or name (when --names is set)]\n  -c, --prefix-colors     Comma-separated list of chalk colors to use on\n                          prefixes. If there are more commands than colors, the\n                          last color will be repeated.\n                          - Available modifiers: reset, bold, dim, italic,\n                          underline, inverse, hidden, strikethrough\n                          - Available colors: black, red, green, yellow, blue,\n                          magenta, cyan, white, gray\n                          - Available background colors: bgBlack, bgRed,\n                          bgGreen, bgYellow, bgBlue, bgMagenta, bgCyan, bgWhite\n                          See https://www.npmjs.com/package/chalk for more\n                          information.            [string] [default: \"gray.dim\"]\n  -l, --prefix-length     Limit how many characters of the command is displayed\n                          in prefix. The option can be used to shorten the\n                          prefix when it is set to \"command\"\n                                                          [number] [default: 10]\n  -t, --timestamp-format  Specify the timestamp in moment/date-fns format.\n                                   [string] [default: \"YYYY-MM-DD HH:mm:ss.SSS\"]\n\nInput handling\n  -i, --handle-input      Whether input should be forwarded to the child\n                          processes. See examples for more information.[boolean]\n  --default-input-target  Identifier for child process to which input on stdin\n                          should be sent if not specified at start of input.\n                          Can be either the index or the name of the process.\n                                                                    [default: 0]\n\nKilling other processes\n  -k, --kill-others      kill other processes if one exits or dies     [boolean]\n  --kill-others-on-fail  kill other processes if one exits with non zero status\n                         code                                          [boolean]\n\nRestarting\n  --restart-tries  How many times a process that died should restart.\n                                                           [number] [default: 0]\n  --restart-after  Delay time to respawn the process, in milliseconds.\n                                                           [number] [default: 0]\n\nOptions:\n  -h, --help         Show help                                         [boolean]\n  -v, -V, --version  Show version number                               [boolean]\n\nExamples:\n\n - Output nothing more than stdout+stderr of child processes\n\n     $ concurrently --raw \"npm run watch-less\" \"npm run watch-js\"\n\n - Normal output but without colors e.g. when logging to file\n\n     $ concurrently --no-color \"grunt watch\" \"http-server\" > log\n\n - Custom prefix\n\n     $ concurrently --prefix \"{time}-{pid}\" \"npm run watch\" \"http-server\"\n\n - Custom names and colored prefixes\n\n     $ concurrently --names \"HTTP,WATCH\" -c \"bgBlue.bold,bgMagenta.bold\"\n     \"http-server\" \"npm run watch\"\n\n - Shortened NPM run commands\n\n     $ concurrently npm:watch-node npm:watch-js npm:watch-css\n\n - Send input to default\n\n     $ concurrently --handle-input \"nodemon\" \"npm run watch-js\"\n     rs  # Sends rs command to nodemon process\n\n - Send input to specific child identified by index\n\n     $ concurrently --handle-input \"npm run watch-js\" nodemon\n     1:rs\n\n - Send input to specific child identified by name\n\n     $ concurrently --handle-input -n js,srv \"npm run watch-js\" nodemon\n     srv:rs\n\n - Shortened NPM run commands\n\n     $ concurrently npm:watch-node npm:watch-js npm:watch-css\n\n - Shortened NPM run command with wildcard\n\n     $ concurrently npm:watch-*\n\nFor more details, visit https://github.com/kimmobrunfeldt/concurrently\n```\n\n## Programmatic Usage\nconcurrently can be used programmatically by using the API documented below:\n\n### `concurrently(commands[, options])`\n- `commands`: an array of either strings (containing the commands to run) or objects\n  with the shape `{ command, name, prefixColor }`.\n- `options` (optional): an object containing any of the below:\n    - `defaultInputTarget`: the default input target when reading from `inputStream`.\n    Default: `0`.\n    - `inputStream`: a [`Readable` stream](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_readable_streams)\n    to read the input from, eg `process.stdin`.\n    - `killOthers`: an array of exitting conditions that will cause a process to kill others.\n    Can contain any of `success` or `failure`.\n    - `outputStream`: a [`Writable` stream](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_writable_streams)\n    to write logs to. Default: `process.stdout`.\n    - `prefix`: the prefix type to use when logging processes output.\n      Possible values: `index`, `pid`, `time`, `command`, `name`, `none`, or a template (eg `[{time} process: {pid}]`).\n      Default: the name of the process, or its index if no name is set.\n    - `prefixLength`: how many characters to show when prefixing with `command`. Default: `10`\n    - `raw`: whether raw mode should be used, meaning strictly process output will\n    be logged, without any prefixes, colouring or extra stuff.\n    - `successCondition`: the condition to consider the run was successful.\n    If `first`, only the first process to exit will make up the success of the run; if `last`, the last process that exits will determine whether the run succeeds.\n    Anything else means all processes should exit successfully.\n    - `restartTries`: how many attempts to restart a process that dies will be made. Default: `0`.\n    - `restartDelay`: how many milliseconds to wait between process restarts. Default: `0`.\n    - `timestampFormat`: a [date-fns/moment format](https://date-fns.org/v1.29.0/docs/format)\n    to use when prefixing with `time`. Default: `YYYY-MM-DD HH:mm:ss.ZZZ`\n\n> Returns: a `Promise` that resolves if the run was successful (according to `successCondition` option),\n> or rejects otherwise.\n\nExample:\n\n```js\nconst concurrently = require('concurrently');\nconcurrently([\n    'npm:watch-*',\n    { command: 'nodemon', name: 'server' }\n], {\n    prefix: 'name',\n    killOthers: ['failure', 'success'],\n    restartTries: 3,\n}).then(success, failure);\n```\n\n## FAQ\n\n* Process exited with code *null*?\n\n    From [Node child_process documentation](http://nodejs.org/api/child_process.html#child_process_event_exit), `exit` event:\n\n    > This event is emitted after the child process ends. If the process\n    > terminated normally, code is the final exit code of the process,\n    > otherwise null. If the process terminated due to receipt of a signal,\n    > signal is the string name of the signal, otherwise null.\n\n\n    So *null* means the process didn't terminate normally. This will make **concurrent**\n    to return non-zero exit code too.\n\n* Does this work with the npm-replacement [yarn](https://github.com/yarnpkg/yarn)?\n\n    Yes! In all examples above, you may replace \"`npm`\" with \"`yarn`\".\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kimmobrunfeldt/concurrently.git"
  },
  "scripts": {
    "lint": "eslint . --ignore-path .gitignore",
    "report-coverage": "cat coverage/lcov.info | coveralls",
    "test": "jest"
  },
  "version": "4.1.0"
}
