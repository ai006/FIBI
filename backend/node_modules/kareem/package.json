{
  "_args": [
    [
      {
        "raw": "kareem@2.3.0",
        "scope": null,
        "escapedName": "kareem",
        "name": "kareem",
        "rawSpec": "2.3.0",
        "spec": "2.3.0",
        "type": "version"
      },
      "C:\\Users\\thier\\Desktop\\WeSponsor\\fullstack_app\\backend\\node_modules\\mongoose"
    ]
  ],
  "_from": "kareem@2.3.0",
  "_hasShrinkwrap": false,
  "_id": "kareem@2.3.0",
  "_location": "/kareem",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/kareem_2.3.0_1537801791037_0.8873303612707288"
  },
  "_npmUser": {
    "name": "vkarpov15",
    "email": "val@karpov.io"
  },
  "_npmVersion": "6.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "kareem@2.3.0",
    "scope": null,
    "escapedName": "kareem",
    "name": "kareem",
    "rawSpec": "2.3.0",
    "spec": "2.3.0",
    "type": "version"
  },
  "_requiredBy": [
    "/mongoose"
  ],
  "_resolved": "https://registry.npmjs.org/kareem/-/kareem-2.3.0.tgz",
  "_shasum": "ef33c42e9024dce511eeaf440cd684f3af1fc769",
  "_shrinkwrap": null,
  "_spec": "kareem@2.3.0",
  "_where": "C:\\Users\\thier\\Desktop\\WeSponsor\\fullstack_app\\backend\\node_modules\\mongoose",
  "author": {
    "name": "Valeri Karpov",
    "email": "val@karpov.io"
  },
  "bugs": {
    "url": "https://github.com/vkarpov15/kareem/issues"
  },
  "dependencies": {},
  "description": "Next-generation take on pre/post function hooks",
  "devDependencies": {
    "acquit": "0.5.1",
    "gulp": "3.8.10",
    "gulp-jscs": "1.4.0",
    "gulp-mocha": "2.0.0",
    "istanbul": "0.4.5",
    "jscs": "1.9.0",
    "mocha": "3.2.0",
    "standard-version": "4.4.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-6hHxsp9e6zQU8nXsP+02HGWXwTkOEw6IROhF2ZA28cYbUk4eJ6QbtZvdqZOdD9YPKghG3apk5eOCvs+tLl3lRg==",
    "shasum": "ef33c42e9024dce511eeaf440cd684f3af1fc769",
    "tarball": "https://registry.npmjs.org/kareem/-/kareem-2.3.0.tgz",
    "fileCount": 14,
    "unpackedSize": 99703,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbqP4/CRA9TVsSAnZWagAAbmoP/AudUh2lo5TxCM+VgdN7\nYl7UBtpvKS7ZRNM4Jji9vjAW32ZP5DRcsfmQlz5PBI/AHcL7vMRazXqLHUmW\nJ6w7/vB5t20uvuFH9xmlJALOr3gl35ddkXneOo700WAHICcoruRqgk6giCB0\n6jlYFJbTqhXGrQIxU7f+Iv2eKh5+y35VYVQSX/5EfmnqfWV3IYRtQ30OSvcB\ndXSobawN6XR8l3U/A2R8cYanSgyRl9KrtesLK9F9VUgOukIVeSjNocn6M+yB\nL+RO8XGOiRISJVQ71jCVcAfh4+VwkjqCI4ZOopIrufAz5BXB9d8Q5TBwT6i6\nSujDyFboyNm130Bh+CurzneIvKJ2HNNiExVNi9lRW42xCUrF4ZpVWEgy71ZU\nqtwq/Ugm0V85gPdumkN8hGgqiyBCvNtcJnJTDStsPg/qVA1PoZu0vZYJUCsp\nrr9Ygqr5T6cBGPI2L94kxSiR0mWhWbRguPvo9HvvCJj3wxpBltz64iYVw1s/\nyDUcWyaobhCLyFu7kdb3y3lyZGBYMCAl0nmeLkuinGsHlmLpZGH4dY2Q3AIL\nFmM9VXpDwqM+27BSW/zsJrGugIN/cgPEJ+iGG7HZxL1d+k847VYVvqbscbx+\nsZIBf0zBz4vUB6hXXhzsIpCsGUNtV+DanGuLbuSLDZJJnkGHsZ2Mt5xsXOwZ\n2AYL\r\n=WD+d\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "1beb350e429b650154ced5f604de8a1cdf153e3c",
  "homepage": "https://github.com/vkarpov15/kareem#readme",
  "jscsConfig": {
    "preset": "airbnb",
    "requireMultipleVarDecl": null,
    "disallowMultipleVarDecl": true
  },
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "vkarpov15",
      "email": "valkar207@gmail.com"
    }
  ],
  "name": "kareem",
  "optionalDependencies": {},
  "readme": "# kareem\n\n  [![Build Status](https://travis-ci.org/vkarpov15/kareem.svg?branch=master)](https://travis-ci.org/vkarpov15/kareem)\n  [![Coverage Status](https://img.shields.io/coveralls/vkarpov15/kareem.svg)](https://coveralls.io/r/vkarpov15/kareem)\n\nRe-imagined take on the [hooks](http://npmjs.org/package/hooks) module, meant to offer additional flexibility in allowing you to execute hooks whenever necessary, as opposed to simply wrapping a single function.\n\nNamed for the NBA's all-time leading scorer Kareem Abdul-Jabbar, known for his mastery of the [hook shot](http://en.wikipedia.org/wiki/Kareem_Abdul-Jabbar#Skyhook)\n\n<img src=\"http://upload.wikimedia.org/wikipedia/commons/0/00/Kareem-Abdul-Jabbar_Lipofsky.jpg\" width=\"220\">\n\n# API\n\n## pre hooks\n\nMuch like [hooks](https://npmjs.org/package/hooks), kareem lets you define\npre and post hooks: pre hooks are called before a given function executes.\nUnlike hooks, kareem stores hooks and other internal state in a separate\nobject, rather than relying on inheritance. Furthermore, kareem exposes\nan `execPre()` function that allows you to execute your pre hooks when\nappropriate, giving you more fine-grained control over your function hooks.\n\n\n#### It runs without any hooks specified\n\n```javascript\n    \n    hooks.execPre('cook', null, function() {\n      done();\n    });\n  \n```\n\n#### It runs basic serial pre hooks\n\npre hook functions take one parameter, a \"done\" function that you execute\nwhen your pre hook is finished.\n\n\n```javascript\n    \n    var count = 0;\n\n    hooks.pre('cook', function(done) {\n      ++count;\n      done();\n    });\n\n    hooks.execPre('cook', null, function() {\n      assert.equal(1, count);\n      done();\n    });\n  \n```\n\n#### It can run multipe pre hooks\n\n```javascript\n    \n    var count1 = 0;\n    var count2 = 0;\n\n    hooks.pre('cook', function(done) {\n      ++count1;\n      done();\n    });\n\n    hooks.pre('cook', function(done) {\n      ++count2;\n      done();\n    });\n\n    hooks.execPre('cook', null, function() {\n      assert.equal(1, count1);\n      assert.equal(1, count2);\n      done();\n    });\n  \n```\n\n#### It can run fully synchronous pre hooks\n\nIf your pre hook function takes no parameters, its assumed to be\nfully synchronous.\n\n\n```javascript\n    \n    var count1 = 0;\n    var count2 = 0;\n\n    hooks.pre('cook', function() {\n      ++count1;\n    });\n\n    hooks.pre('cook', function() {\n      ++count2;\n    });\n\n    hooks.execPre('cook', null, function(error) {\n      assert.equal(null, error);\n      assert.equal(1, count1);\n      assert.equal(1, count2);\n      done();\n    });\n  \n```\n\n#### It properly attaches context to pre hooks\n\nPre save hook functions are bound to the second parameter to `execPre()`\n\n\n```javascript\n    \n    hooks.pre('cook', function(done) {\n      this.bacon = 3;\n      done();\n    });\n\n    hooks.pre('cook', function(done) {\n      this.eggs = 4;\n      done();\n    });\n\n    var obj = { bacon: 0, eggs: 0 };\n\n    // In the pre hooks, `this` will refer to `obj`\n    hooks.execPre('cook', obj, function(error) {\n      assert.equal(null, error);\n      assert.equal(3, obj.bacon);\n      assert.equal(4, obj.eggs);\n      done();\n    });\n  \n```\n\n#### It can execute parallel (async) pre hooks\n\nLike the hooks module, you can declare \"async\" pre hooks - these take two\nparameters, the functions `next()` and `done()`. `next()` passes control to\nthe next pre hook, but the underlying function won't be called until all\nasync pre hooks have called `done()`.\n\n\n```javascript\n    \n    hooks.pre('cook', true, function(next, done) {\n      this.bacon = 3;\n      next();\n      setTimeout(function() {\n        done();\n      }, 5);\n    });\n\n    hooks.pre('cook', true, function(next, done) {\n      next();\n      var _this = this;\n      setTimeout(function() {\n        _this.eggs = 4;\n        done();\n      }, 10);\n    });\n\n    hooks.pre('cook', function(next) {\n      this.waffles = false;\n      next();\n    });\n\n    var obj = { bacon: 0, eggs: 0 };\n\n    hooks.execPre('cook', obj, function() {\n      assert.equal(3, obj.bacon);\n      assert.equal(4, obj.eggs);\n      assert.equal(false, obj.waffles);\n      done();\n    });\n  \n```\n\n#### It supports returning a promise\n\nYou can also return a promise from your pre hooks instead of calling\n`next()`. When the returned promise resolves, kareem will kick off the\nnext middleware.\n\n\n```javascript\n    \n    hooks.pre('cook', function() {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          this.bacon = 3;\n          resolve();\n        }, 100);\n      });\n    });\n\n    var obj = { bacon: 0 };\n\n    hooks.execPre('cook', obj, function() {\n      assert.equal(3, obj.bacon);\n      done();\n    });\n  \n```\n\n## post hooks\n\n#### It runs without any hooks specified\n\n```javascript\n    \n    hooks.execPost('cook', null, [1], function(error, eggs) {\n      assert.ifError(error);\n      assert.equal(1, eggs);\n      done();\n    });\n  \n```\n\n#### It executes with parameters passed in\n\n```javascript\n    \n    hooks.post('cook', function(eggs, bacon, callback) {\n      assert.equal(1, eggs);\n      assert.equal(2, bacon);\n      callback();\n    });\n\n    hooks.execPost('cook', null, [1, 2], function(error, eggs, bacon) {\n      assert.ifError(error);\n      assert.equal(1, eggs);\n      assert.equal(2, bacon);\n      done();\n    });\n  \n```\n\n#### It can use synchronous post hooks\n\n```javascript\n    \n    var execed = {};\n\n    hooks.post('cook', function(eggs, bacon) {\n      execed.first = true;\n      assert.equal(1, eggs);\n      assert.equal(2, bacon);\n    });\n\n    hooks.post('cook', function(eggs, bacon, callback) {\n      execed.second = true;\n      assert.equal(1, eggs);\n      assert.equal(2, bacon);\n      callback();\n    });\n\n    hooks.execPost('cook', null, [1, 2], function(error, eggs, bacon) {\n      assert.ifError(error);\n      assert.equal(2, Object.keys(execed).length);\n      assert.ok(execed.first);\n      assert.ok(execed.second);\n      assert.equal(1, eggs);\n      assert.equal(2, bacon);\n      done();\n    });\n  \n```\n\n## wrap()\n\n#### It wraps pre and post calls into one call\n\n```javascript\n    \n    hooks.pre('cook', true, function(next, done) {\n      this.bacon = 3;\n      next();\n      setTimeout(function() {\n        done();\n      }, 5);\n    });\n\n    hooks.pre('cook', true, function(next, done) {\n      next();\n      var _this = this;\n      setTimeout(function() {\n        _this.eggs = 4;\n        done();\n      }, 10);\n    });\n\n    hooks.pre('cook', function(next) {\n      this.waffles = false;\n      next();\n    });\n\n    hooks.post('cook', function(obj) {\n      obj.tofu = 'no';\n    });\n\n    var obj = { bacon: 0, eggs: 0 };\n\n    var args = [obj];\n    args.push(function(error, result) {\n      assert.ifError(error);\n      assert.equal(null, error);\n      assert.equal(3, obj.bacon);\n      assert.equal(4, obj.eggs);\n      assert.equal(false, obj.waffles);\n      assert.equal('no', obj.tofu);\n\n      assert.equal(obj, result);\n      done();\n    });\n\n    hooks.wrap(\n      'cook',\n      function(o, callback) {\n        assert.equal(3, obj.bacon);\n        assert.equal(4, obj.eggs);\n        assert.equal(false, obj.waffles);\n        assert.equal(undefined, obj.tofu);\n        callback(null, o);\n      },\n      obj,\n      args);\n  \n```\n\n## createWrapper()\n\n#### It wraps wrap() into a callable function\n\n```javascript\n    \n    hooks.pre('cook', true, function(next, done) {\n      this.bacon = 3;\n      next();\n      setTimeout(function() {\n        done();\n      }, 5);\n    });\n\n    hooks.pre('cook', true, function(next, done) {\n      next();\n      var _this = this;\n      setTimeout(function() {\n        _this.eggs = 4;\n        done();\n      }, 10);\n    });\n\n    hooks.pre('cook', function(next) {\n      this.waffles = false;\n      next();\n    });\n\n    hooks.post('cook', function(obj) {\n      obj.tofu = 'no';\n    });\n\n    var obj = { bacon: 0, eggs: 0 };\n\n    var cook = hooks.createWrapper(\n      'cook',\n      function(o, callback) {\n        assert.equal(3, obj.bacon);\n        assert.equal(4, obj.eggs);\n        assert.equal(false, obj.waffles);\n        assert.equal(undefined, obj.tofu);\n        callback(null, o);\n      },\n      obj);\n\n    cook(obj, function(error, result) {\n      assert.ifError(error);\n      assert.equal(3, obj.bacon);\n      assert.equal(4, obj.eggs);\n      assert.equal(false, obj.waffles);\n      assert.equal('no', obj.tofu);\n\n      assert.equal(obj, result);\n      done();\n    });\n  \n```\n\n## clone()\n\n#### It clones a Kareem object\n\n```javascript\n    \n    var k1 = new Kareem();\n    k1.pre('cook', function() {});\n    k1.post('cook', function() {});\n\n    var k2 = k1.clone();\n    assert.deepEqual(['cook'], Object.keys(k2._pres));\n    assert.deepEqual(['cook'], Object.keys(k2._posts));\n  \n```\n\n## merge()\n\n#### It pulls hooks from another Kareem object\n\n```javascript\n    \n    var k1 = new Kareem();\n    var test1 = function() {};\n    k1.pre('cook', test1);\n    k1.post('cook', function() {});\n\n    var k2 = new Kareem();\n    var test2 = function() {};\n    k2.pre('cook', test2);\n    var k3 = k2.merge(k1);\n    assert.equal(k3._pres['cook'].length, 2);\n    assert.equal(k3._pres['cook'][0].fn, test2);\n    assert.equal(k3._pres['cook'][1].fn, test1);\n    assert.equal(k3._posts['cook'].length, 1);\n  \n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/vkarpov15/kareem.git"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha ./test/*",
    "test-travis": "./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha -- -R spec ./test/*"
  },
  "version": "2.3.0"
}
