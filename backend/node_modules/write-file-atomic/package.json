{
  "_args": [
    [
      {
        "raw": "write-file-atomic@^2.0.0",
        "scope": null,
        "escapedName": "write-file-atomic",
        "name": "write-file-atomic",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\thier\\Desktop\\WeSponsor\\fullstack_app\\backend\\node_modules\\configstore"
    ]
  ],
  "_from": "write-file-atomic@^2.0.0",
  "_hasShrinkwrap": false,
  "_id": "write-file-atomic@2.4.3",
  "_location": "/write-file-atomic",
  "_nodeVersion": "12.2.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/write-file-atomic_2.4.3_1558716532556_0.2880615077337976"
  },
  "_npmUser": {
    "name": "isaacs",
    "email": "i@izs.me"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "write-file-atomic@^2.0.0",
    "scope": null,
    "escapedName": "write-file-atomic",
    "name": "write-file-atomic",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/configstore"
  ],
  "_resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-2.4.3.tgz",
  "_shasum": "1fd2e9ae1df3e75b8d8c367443c692d4ca81f481",
  "_shrinkwrap": null,
  "_spec": "write-file-atomic@^2.0.0",
  "_where": "C:\\Users\\thier\\Desktop\\WeSponsor\\fullstack_app\\backend\\node_modules\\configstore",
  "author": {
    "name": "Rebecca Turner",
    "email": "me@re-becca.org",
    "url": "http://re-becca.org"
  },
  "bugs": {
    "url": "https://github.com/iarna/write-file-atomic/issues"
  },
  "dependencies": {
    "graceful-fs": "^4.1.11",
    "imurmurhash": "^0.1.4",
    "signal-exit": "^3.0.2"
  },
  "description": "Write files in an atomic fashion w/configurable ownership",
  "devDependencies": {
    "mkdirp": "^0.5.1",
    "require-inject": "^1.4.0",
    "rimraf": "^2.5.4",
    "standard": "^12.0.1",
    "tap": "^12.1.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-GaETH5wwsX+GcnzhPgKcKjJ6M2Cq3/iZp1WyY/X1CSqrW+jVNM9Y7D8EC2sM4ZG/V8wZlSniJnCKWPmBYAucRQ==",
    "shasum": "1fd2e9ae1df3e75b8d8c367443c692d4ca81f481",
    "tarball": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-2.4.3.tgz",
    "fileCount": 5,
    "unpackedSize": 12243,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc6CB1CRA9TVsSAnZWagAAKv8P/0XmSzv2zNvqfeBtBqqm\nFfvpCZHVOGb4jYPW87fIF1BsFCqGILhDEhUhW2tSkckNW4a7SB+ZmmAVzh4w\ngS8JL0FAkgftjvS1lkVQ5fMJvhw0HoKMVGGKGgOv2LN2G3genJPn7iU8oOOP\nCQVrEjBUyL9no1ebU6hDNdp2v8FcltyFbshwYJtVtCHLek80AREhtkpe0uHg\nc7zYwszOPT5g/AJf47QiY1m7jr0KH6BLSDx2loqx+uaS3qazVcflUG8N7ezy\nRSyTybXScz+qc0Puickqzg8ZTEloc5CQAGU4cgIYDyCYjB36HFxJoCjQShVa\nBAWuv7UrnIxqCvVCJmZYbEehoEkLh0C8tKTn+DJBM8BIrxWKklMeV4hNUNJ8\n1zQamBc19YcDKqOqBH2g3ggZNDYZ0s8Cr726v4wzaDMipWFor196A3HSBy9i\nLKiE/f0/4O9FyKKvodMGTvmmJIkdiHnt6nAX8XiBJExzQKY8r+ZXsE6NrZwH\n8NgA77VuxHdppfc5pURyVEFRFa1xWDVo1M445CvFo+ijqehtJ41uWOftBbrE\nuJ//zGzq88uK2gv9RbUvJTTPCEB61IKeUBsqIswmbiS8i0xP/KmKR0Vtg7uN\nOMye9XJOJNV0OpCJrokCB7A8WpFq55o0KBDA5yMYXGEskLTbL6jYicIhC45U\nk3qn\r\n=Ai3b\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "f3b025d7ec066b3579c0737a400e668dbed42262",
  "homepage": "https://github.com/iarna/write-file-atomic",
  "keywords": [
    "writeFile",
    "atomic"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "iarna",
      "email": "me@re-becca.org"
    },
    {
      "name": "isaacs",
      "email": "i@izs.me"
    },
    {
      "name": "othiym23",
      "email": "ogd@aoaioxxysz.net"
    },
    {
      "name": "zkat",
      "email": "npm@zkat.tech"
    }
  ],
  "name": "write-file-atomic",
  "optionalDependencies": {},
  "readme": "write-file-atomic\n-----------------\n\nThis is an extension for node's `fs.writeFile` that makes its operation\natomic and allows you set ownership (uid/gid of the file).\n\n### var writeFileAtomic = require('write-file-atomic')<br>writeFileAtomic(filename, data, [options], callback)\n\n* filename **String**\n* data **String** | **Buffer**\n* options **Object** | **String**\n  * chown **Object** default, uid & gid of existing file, if any\n    * uid **Number**\n    * gid **Number**\n  * encoding **String** | **Null** default = 'utf8'\n  * fsync **Boolean** default = true\n  * mode **Number** default, from existing file, if any\n  * Promise **Object** default = native Promise object\n* callback **Function**\n\nAtomically and asynchronously writes data to a file, replacing the file if it already\nexists.  data can be a string or a buffer.\n\nThe file is initially named `filename + \".\" + murmurhex(__filename, process.pid, ++invocations)`.\nNote that `require('worker_threads').threadId` is used in addition to `process.pid` if running inside of a worker thread.\nIf writeFile completes successfully then, if passed the **chown** option it will change\nthe ownership of the file. Finally it renames the file back to the filename you specified. If\nit encounters errors at any of these steps it will attempt to unlink the temporary file and then\npass the error back to the caller.\nIf multiple writes are concurrently issued to the same file, the write operations are put into a queue and serialized in the order they were called, using Promises. Native promises are used by default, but you can inject your own promise-like object with the **Promise** option. Writes to different files are still executed in parallel.\n\nIf provided, the **chown** option requires both **uid** and **gid** properties or else\nyou'll get an error.  If **chown** is not specified it will default to using\nthe owner of the previous file.  To prevent chown from being ran you can\nalso pass `false`, in which case the file will be created with the current user's credentials.\n\nIf **mode** is not specified, it will default to using the permissions from\nan existing file, if any.  Expicitly setting this to `false` remove this default, resulting\nin a file created with the system default permissions.\n\nIf options is a String, it's assumed to be the **encoding** option. The **encoding** option is ignored if **data** is a buffer. It defaults to 'utf8'.\n\nIf the **fsync** option is **false**, writeFile will skip the final fsync call.\n\nExample:\n\n```javascript\nwriteFileAtomic('message.txt', 'Hello Node', {chown:{uid:100,gid:50}}, function (err) {\n  if (err) throw err;\n  console.log('It\\'s saved!');\n});\n```\n\n### var writeFileAtomicSync = require('write-file-atomic').sync<br>writeFileAtomicSync(filename, data, [options])\n\nThe synchronous version of **writeFileAtomic**.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/iarna/write-file-atomic.git"
  },
  "scripts": {
    "postpublish": "git push origin --follow-tags",
    "postversion": "npm publish",
    "preversion": "npm test",
    "test": "standard && tap --100 test/*.js"
  },
  "version": "2.4.3"
}
