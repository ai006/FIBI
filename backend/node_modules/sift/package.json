{
  "_args": [
    [
      {
        "raw": "sift@7.0.1",
        "scope": null,
        "escapedName": "sift",
        "name": "sift",
        "rawSpec": "7.0.1",
        "spec": "7.0.1",
        "type": "version"
      },
      "C:\\Users\\thier\\Desktop\\WeSponsor\\fullstack_app\\backend\\node_modules\\mongoose"
    ]
  ],
  "_from": "sift@7.0.1",
  "_hasShrinkwrap": false,
  "_id": "sift@7.0.1",
  "_location": "/sift",
  "_nodeVersion": "8.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/sift_7.0.1_1539289401909_0.5103757017251642"
  },
  "_npmUser": {
    "name": "crcn",
    "email": "craig.j.condon@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sift@7.0.1",
    "scope": null,
    "escapedName": "sift",
    "name": "sift",
    "rawSpec": "7.0.1",
    "spec": "7.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/mongoose"
  ],
  "_resolved": "https://registry.npmjs.org/sift/-/sift-7.0.1.tgz",
  "_shasum": "47d62c50b159d316f1372f8b53f9c10cd21a4b08",
  "_shrinkwrap": null,
  "_spec": "sift@7.0.1",
  "_where": "C:\\Users\\thier\\Desktop\\WeSponsor\\fullstack_app\\backend\\node_modules\\mongoose",
  "author": {
    "name": "Craig Condon",
    "email": "craig.j.condon@gmail.com",
    "url": "http://crcn.io"
  },
  "bugs": {
    "url": "https://github.com/crcn/sift.js/issues"
  },
  "dependencies": {},
  "description": "mongodb query style array filtering",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.3",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-es2015-loose": "^8.0.0",
    "bson": "^3.0.2",
    "immutable": "^3.7.6",
    "mocha": "^5.2.0",
    "webpack": "^4.20.2",
    "webpack-cli": "^3.1.2",
    "yargs": "^3.15.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-oqD7PMJ+uO6jV9EQCl0LrRw1OwsiPsiFQR5AR30heR+4Dl7jBBbDLnNvWiak20tzZlSE1H7RB30SX/1j/YYT7g==",
    "shasum": "47d62c50b159d316f1372f8b53f9c10cd21a4b08",
    "tarball": "https://registry.npmjs.org/sift/-/sift-7.0.1.tgz",
    "fileCount": 22,
    "unpackedSize": 248862,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbv7E6CRA9TVsSAnZWagAAEBcP/A76+LgrjbUvFsqIRlmi\nf8bo2+RPfTa2rq288QWFnGspyXJu4KLTE8W62Wi+K4nA41AXjIMl8LnbYyFs\n7mxyJndYBHsQnPzpsLQD2g+Kcs/HbHju8Q4qoaWeKAflL3/l9CVqy67zeq9G\ngOfx8oYxq8UmAQAxa9sWq0ewpWDGSh8qI6d+GkISYJnmlIpiEG47YldhqOjm\n0wk0e0PBsGw2rB+QJkVYgOw5/OoNbzgJeqgzZACc9f6KM9/LtY084nfhmZ+0\nk1+K7d+z0q3toTbL2xnr2eb7NM0AagCs2T2e/i0E6Ns1W5UaFUtGCz6x2hpG\ndZ5Uxo1HuPHJHuI73/OfCd5hltvI9uGT18lkWC4lIo3vPcCY9ymAlAP97sfG\nzJWk1gtS5zBpoEW7LJG9n4QP8umtsZ4eoyUUwXnmi/ucJa1wTWxoYkwWO7sP\nznQJwTgTm2RH7ZDibX7Fz7nXkyZ1VazW9znoWT/YNUmgU/1/en8iblsQ9foB\n4FfUhkcXoanuhzDPUq9UNpMwMWBbaIP8fmsKjKwbU8d5gr3qikZHOKeVBYWK\npKOkdpI5fMSbtv51ygkH1JxxZVatyY5Jnyi5AcIkxzaiByBVEuahpx1WNJqL\nxNX629qVIBQmgSfc+JMKnAvhhhIDi3o7m2vDDIQ12gcKaOFZXjJsTnh5qdyF\nKTMD\r\n=Rcqv\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {},
  "es2015": "./src/index.js",
  "gitHead": "8b1f4b93cdde39d870426082886d1862a0e353bb",
  "homepage": "https://github.com/crcn/sift.js#readme",
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "architectd",
      "email": "craig.j.condon@gmail.com"
    },
    {
      "name": "crcn",
      "email": "craig.j.condon@gmail.com"
    }
  ],
  "module": "./src/index.js",
  "name": "sift",
  "optionalDependencies": {},
  "readme": "## validate objects & filter arrays with mongodb queries\n[![Build Status](https://secure.travis-ci.org/crcn/sift.js.png)](https://secure.travis-ci.org/crcn/sift.js) \n<!-- [![Coverage Status](https://coveralls.io/repos/crcn/sift.js/badge.svg)](https://coveralls.io/r/crcn/sift.js)  -->\n<!-- [![Join the chat at https://gitter.im/crcn/sift.js](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/crcn/sift.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) -->\n\n**For extended documentation, checkout http://docs.mongodb.org/manual/reference/operator/query/**\n\n## Features:\n\n- Supported operators: [$in](#in), [$nin](#nin), [$exists](#exists), [$gte](#gte), [$gt](#gt), [$lte](#lte), [$lt](#lt), [$eq](#eq), [$ne](#ne), [$mod](#mod), [$all](#all), [$and](#and), [$or](#or), [$nor](#nor), [$not](#not), [$size](#size), [$type](#type), [$regex](#regex), [$where](#where), [$elemMatch](#elemmatch)\n- Regexp searches\n- Function filtering\n- sub object searching\n- dot notation searching\n- Supports node.js, and web\n- Small (2 kb minified) library\n- Custom Expressions\n- filtering of immutable datastructures\n\n\n\n## Node.js Examples\n\n```javascript\n\nimport sift from 'sift';\n\n//intersecting arrays\nvar sifted = sift({ $in: ['hello','world'] }, ['hello','sifted','array!']); //['hello']\n\n//regexp filter\nvar sifted = sift(/^j/, ['craig','john','jake']); //['john','jake']\n\n\n//A *sifter* is returned if the second parameter is omitted\nvar testQuery = sift({\n\n\t//you can also filter against functions\n\tname: function(value) {\n\t\treturn value.length == 5;\n\t}\n});\n\n//filtered: [{ name: 'craig' }]\n[{\n\tname: 'craig',\n},\n{\n\tname: 'john'\n},\n{\n\tname: 'jake'\n}].filter(testQuery);\n\n\n//you can test *single values* against your custom sifter\ntestQuery({ name: 'sarah' }); //true\ntestQuery({ name: 'tim' }); //false\\\n```\n\n## Browser Examples\n```html\n<html>\n\t<head>\n\t\t<script src=\"https://raw.github.com/crcn/sift.js/master/sift.min.js\" type=\"text/javascript\"></script>\n\t\t<script type=\"text/javascript\">\n\t\t\t//regexp filter\n\t\t\tvar sifted = sift(/^j/, ['craig','john','jake']); //['john','jake']\n\t\t</script>\n\t</head>\n\t<body>\n\t</body>\n</html>\n```\n\n## API\n\n### .sift(filter[, array][, selectorFn])\n\n- `filter` - the filter to use against the target array\n- `array` - sifts against target array. Without this, a function is returned\n- `selectorFn` - selector for the values within the array.\n\nWith an array:\n\n```javascript\nsift({$exists:true}, ['craig',null]); //['craig']\n```\n\nWithout an array, a sifter is returned:\n\n```javascript\nvar siftExists = sift({$exists:true});\n\nsiftExists('craig'); //true\nsiftExists(null); //false\n['craig',null].filter(siftExists); //['craig']\n```\n\nWith a selector:\n\n```javascript\nvar sifter = sift({$exists:true}, function(user) {\n\treturn !!user.name;\n});\n\n\nsifter([\n\t{\n\t\tname: \"Craig\"\n\t},\n\t{\n\t\tname: null\n\t}\n])\n```\n\nWith your sifter, you can also **test** values:\n\n```javascript\nsiftExists(null); //false\nsiftExists('craig'); //true\n```\n\n\n## Supported Operators:\n\nSee MongoDB's [advanced queries](http://www.mongodb.org/display/DOCS/Advanced+Queries) for more info.\n\n### $in\n\narray value must be *$in* the given query:\n\nIntersecting two arrays:\n\n```javascript\n//filtered: ['Brazil']\nsift({ $in: ['Costa Rica','Brazil'] }, ['Brazil','Haiti','Peru','Chile']);\n```\n\nHere's another example. This acts more like the $or operator:\n\n```javascript\nsift({ location: { $in: ['Costa Rica','Brazil'] } }, [ { name: 'Craig', location: 'Brazil' } ]);\n```\n\n### $nin\n\nOpposite of $in:\n\n```javascript\n//filtered: ['Haiti','Peru','Chile']\nsift({ $nin: ['Costa Rica','Brazil'] }, ['Brazil','Haiti','Peru','Chile']);\n```\n\n### $exists\n\nChecks if whether a value exists:\n\n```javascript\n//filtered: ['Craig','Tim']\nsift({ $exists: true }, ['Craig',null,'Tim']);\n```\n\nYou can also filter out values that don't exist\n\n```javascript\n//filtered: [{ name: 'Craig', city: 'Minneapolis' }]\nsift({ city: { $exists: false } }, [ { name: 'Craig', city: 'Minneapolis' }, { name: 'Tim' }]);\n```\n\n### $gte\n\nChecks if a number is >= value:\n\n```javascript\n//filtered: [2, 3]\nsift({ $gte: 2 }, [0, 1, 2, 3]);\n```\n\n### $gt\n\nChecks if a number is > value:\n\n```javascript\n//filtered: [3]\nsift({ $gt: 2 }, [0, 1, 2, 3]);\n```\n\n### $lte\n\nChecks if a number is <= value.\n\n```javascript\n//filtered: [0, 1, 2]\nsift({ $lte: 2 }, [0, 1, 2, 3]);\n```\n\n### $lt\n\nChecks if number is < value.\n\n```javascript\n//filtered: [0, 1]\nsift({ $lt: 2 }, [0, 1, 2, 3]);\n```\n\n### $eq\n\nChecks if `query === value`. Note that **$eq can be omitted**. For **$eq**, and **$ne**\n\n```javascript\n//filtered: [{ state: 'MN' }]\nsift({ state: {$eq: 'MN' }}, [{ state: 'MN' }, { state: 'CA' }, { state: 'WI' }]);\n```\n\nOr:\n\n```javascript\n//filtered: [{ state: 'MN' }]\nsift({ state: 'MN' }, [{ state: 'MN' }, { state: 'CA' }, { state: 'WI' }]);\n```\n\n### $ne\n\nChecks if `query !== value`.\n\n```javascript\n//filtered: [{ state: 'CA' }, { state: 'WI'}]\nsift({ state: {$ne: 'MN' }}, [{ state: 'MN' }, { state: 'CA' }, { state: 'WI' }]);\n```\n\n### $mod\n\nModulus:\n\n```javascript\n//filtered: [300, 600]\nsift({ $mod: [3, 0] }, [100, 200, 300, 400, 500, 600]);\n```\n\n### $all\n\nvalues must match **everything** in array:\n\n```javascript\n//filtered: [ { tags: ['books','programming','travel' ]} ]\nsift({ tags: {$all: ['books','programming'] }}, [\n{ tags: ['books','programming','travel' ] },\n{ tags: ['travel','cooking'] } ]);\n```\n\n### $and\n\nability to use an array of expressions. All expressions must test true.\n\n```javascript\n//filtered: [ { name: 'Craig', state: 'MN' }]\n\nsift({ $and: [ { name: 'Craig' }, { state: 'MN' } ] }, [\n{ name: 'Craig', state: 'MN' },\n{ name: 'Tim', state: 'MN' },\n{ name: 'Joe', state: 'CA' } ]);\n```\n\n### $or\n\nOR array of expressions.\n\n```javascript\n//filtered: [ { name: 'Craig', state: 'MN' }, { name: 'Tim', state: 'MN' }]\nsift({ $or: [ { name: 'Craig' }, { state: 'MN' } ] }, [\n{ name: 'Craig', state: 'MN' },\n{ name: 'Tim', state: 'MN' },\n{ name: 'Joe', state: 'CA' } ]);\n```\n\n### $nor\n\nopposite of or:\n\n```javascript\n//filtered: [ { name: 'Tim', state: 'MN' }, { name: 'Joe', state: 'CA' }]\nsift({ $nor: [ { name: 'Craig' }, { state: 'MN' } ] }, [\n{ name: 'Craig', state: 'MN' },\n{ name: 'Tim', state: 'MN' },\n{ name: 'Joe', state: 'CA' } ]);\n```\n\n\n### $size\n\nMatches an array - must match given size:\n\n```javascript\n//filtered: ['food','cooking']\nsift({ tags: { $size: 2 } }, [ { tags: ['food','cooking'] }, { tags: ['traveling'] }]);\n```\n\n### $type\n\nMatches a values based on the type\n\n```javascript\nsift({ $type: Date }, [new Date(), 4342, 'hello world']); //returns single date\nsift({ $type: String }, [new Date(), 4342, 'hello world']); //returns ['hello world']\n```\n\n### $regex\n\nMatches values based on the given regular expression\n\n```javascript\nsift({ $regex: /^f/i, $nin: [\"frank\"] }, [\"frank\", \"fred\", \"sam\", \"frost\"]); // [\"fred\", \"frost\"]\nsift({ $regex: \"^f\", $options: \"i\", $nin: [\"frank\"] }, [\"frank\", \"fred\", \"sam\", \"frost\"]); // [\"fred\", \"frost\"]\n```\n\n### $where\n\nMatches based on some javascript comparison\n\n```javascript\nsift({ $where: \"this.name === 'frank'\" }, [{name:'frank'},{name:'joe'}]); // [\"frank\"]\nsift({\n\t$where: function() {\n\t\treturn this.name === \"frank\"\n\t}\n}, [{name:'frank'},{name:'joe'}]); // [\"frank\"]\n```\n\n### $elemMatch\n\nMatches elements of array\n\n```javascript\nvar bills = [{\n    month: 'july',\n    casts: [{\n        id: 1,\n        value: 200\n    },{\n        id: 2,\n        value: 1000\n    }]\n},\n{\n    month: 'august',\n    casts: [{\n        id: 3,\n        value: 1000,\n    }, {\n        id: 4,\n        value: 4000\n    }]\n}];\n\nvar result = sift({\n    casts: {$elemMatch:{\n        value: {$gt: 1000}\n    }}\n}, bills); // {month:'august', casts:[{id:3, value: 1000},{id: 4, value: 4000}]}\n```\n\n### $not\n\nNot expression:\n\n```javascript\nsift({$not:{$in:['craig','tim']}}, ['craig','tim','jake']); //['jake']\nsift({$not:{$size:5}}, ['craig','tim','jake']); //['tim','jake']\n```\n\n## sub object Searching\n\n\n```javascript\nvar people = [{\n\tname: 'craig',\n\taddress: {\n\t\tcity: 'Minneapolis'\n\t}\n},\n{\n\tname: 'tim',\n\taddress: {\n\t\tcity: 'St. Paul'\n\t}\n}];\n\nvar sifted = sift({ address: { city: 'Minneapolis' }}, people); // count = 1\n\n//or\nvar sifted = sift({'address.city': 'minneapolis'}, people);//count = 1\n```\n\n\n## Get index of first matching element\n\nGet the index (0-based) of first matching element in target array. Returns `-1` if no match is found.\n\n```javascript\nimport {indexOf as siftIndexOf} from 'sift';\nvar people = [{\n\tname: 'craig',\n\taddress: {\n\t\tcity: 'Minneapolis'\n\t}\n},\n{\n\tname: 'tim',\n\taddress: {\n\t\tcity: 'St. Paul'\n\t}\n}];\n\nvar index = siftIndexOf({ address: { city: 'Minneapolis' }}, people); // index = 0\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/crcn/sift.js.git"
  },
  "scripts": {
    "build": "mkdir -p lib; babel src/index.js > lib/index.js; webpack",
    "test": "mocha ./test -R spec --compilers js:babel-core/register"
  },
  "typings": "./index.d.ts",
  "version": "7.0.1"
}
